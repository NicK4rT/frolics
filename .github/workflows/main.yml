name: Travel Post Distribution
on:
  push:
    paths: ['posts/*.json']
  workflow_call:
  workflow_dispatch:

jobs:
  distribute:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get latest JSON file
        id: newpost
        run: |
          file=$(ls posts/*.json | sort | tail -n1)
          echo "file=$file" >> $GITHUB_OUTPUT

      - name: Parse post info (title/desc/images)
        id: parsed
        run: |
          title=$(jq -r '.title' "${{ steps.newpost.outputs.file }}")
          description=$(jq -r '.description' "${{ steps.newpost.outputs.file }}")
          images=$(jq -c '.images[:10]' "${{ steps.newpost.outputs.file }}")
          location=$(jq -r '.location' "${{ steps.newpost.outputs.file }}")
          number=$(jq -r '.number' "${{ steps.newpost.outputs.file }}")
          echo "title=$title" >> $GITHUB_OUTPUT
          echo "description=$description" >> $GITHUB_OUTPUT
          echo "images=$images" >> $GITHUB_OUTPUT
          echo "location=$location" >> $GITHUB_OUTPUT
          echo "number=$number" >> $GITHUB_OUTPUT

      - name: Post to Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_LEGO }}
          TITLE: ${{ steps.parsed.outputs.title }}
          DESCRIPTION: ${{ steps.parsed.outputs.description }}
          IMAGES: ${{ steps.parsed.outputs.images }}
          LOCATION: ${{ steps.parsed.outputs.location }}
          NUMBER: ${{ steps.parsed.outputs.number }}
        run: |
          base_url="https://raw.githubusercontent.com/NicK4rT/frolics/main/"
          embeds=$(echo "$IMAGES" | jq --arg base "$base_url" '[.[] | {image: {url: ($base + .)}}]')

          content="**Greetings from $LOCATION**"
          if [ -n "$TITLE" ] && [ "$TITLE" != "null" ]; then
            content="**$TITLE**"
          fi
          if [ -n "$DESCRIPTION" ] && [ "$DESCRIPTION" != "null" ]; then
            content="$content
          $DESCRIPTION"
          fi

          payload=$(jq -n \
            --arg content "$content" \
            --argjson embeds "$embeds" \
            '{content: $content, embeds: $embeds}'
          )

          echo "$payload" | jq

          response=$(curl -s -w "%{http_code}" -o response.txt -X POST -H "Content-Type: application/json" -d "$payload" "$DISCORD_WEBHOOK")

          cat response.txt
          if [ "$response" -ne 204 ]; then
            echo "Discord POST failed with status $response"
            exit 1
          fi

      - name: Install pytumblr
        run: pip install pytumblr requests

      - name: Post Tumblr Photo Set
        env:
          CONSUMER_KEY: ${{ secrets.TUMBLR_CONSUMER_API_KEY }}
          CONSUMER_SECRET: ${{ secrets.TUMBLR_CONSUMER_API_SECRET }}
          ACCESS_TOKEN: ${{ secrets.TUMBLR_ACCESS_TOKEN }}
          ACCESS_TOKEN_SECRET: ${{ secrets.TUMBLR_ACCESS_TOKEN_SECRET }}
          BLOG_IDENTIFIER: ${{ secrets.TUMBLR_BLOG_IDENTIFIER }}
          POST_JSON: ${{ steps.newpost.outputs.file }}
        run: |
          python3 <<EOF
          import os, json, pytumblr

          with open(os.environ['POST_JSON']) as f:
              post = json.load(f)

          client = pytumblr.TumblrRestClient(
              os.environ['CONSUMER_KEY'],
              os.environ['CONSUMER_SECRET'],
              os.environ['ACCESS_TOKEN'],
              os.environ['ACCESS_TOKEN_SECRET'],
          )

          caption = f"<b>{post.get('title','')}</b><br>{post.get('description','')}"
          images = post.get('images', [])[:10]
          if not images:
              raise Exception("No images found in post JSON!")

          images = post.get('images', [])[:10]
          if not images:
            raise Exception("No images found in post JSON!")

            # No URL conversion at allâ€”just use the path as is!
            # Confirm files exist
            for img in images:
                if not os.path.exists(img):
                    raise Exception(f"File does not exist: {img}")

            res = client.create_photo(
                os.environ['BLOG_IDENTIFIER'],
                state="published",
                tags=post.get('tags', []),
                data=images,
                caption=caption,
            format='html'
            )
          print(res)
          EOF

      - name: Trigger Private Repo Update
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            github.rest.repos.createDispatchEvent({
              owner: 'NicK4rT',
              repo: 'personal',
              event_type: 'travel-post-update'
            })
