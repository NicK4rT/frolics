name: Travel Post Distribution
on:
  push:
    paths: ['posts/*.json']
  workflow_call:
  workflow_dispatch:

jobs:
  distribute:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get latest JSON file
        id: newpost
        run: |
          file=$(ls posts/*.json | sort | tail -n1)
          echo "file=$file" >> $GITHUB_OUTPUT

      - name: Parse post info (title/desc/images)
        id: parsed
        run: |
          title=$(jq -r '.title' "${{ steps.newpost.outputs.file }}")
          description=$(jq -r '.description' "${{ steps.newpost.outputs.file }}")
          images=$(jq -c '.images[:10]' "${{ steps.newpost.outputs.file }}")
          echo "title=$title" >> $GITHUB_OUTPUT
          echo "description=$description" >> $GITHUB_OUTPUT
          echo "images=$images" >> $GITHUB_OUTPUT

      - name: Post to Discord
        env:
            DISCORD_WEBHOOK: ${{ secrets.DISCORD_LEGO }}
            TITLE: ${{ steps.parsed.outputs.title }}
            DESCRIPTION: ${{ steps.parsed.outputs.description }}
            IMAGES: ${{ steps.parsed.outputs.images }}
        run: |
            # Convert image URLs to proper embed JSON objects
            embeds=$(echo "$IMAGES" | jq '[.[] | {image: {url: .}}]')

            # Create full payload
            payload=$(jq -n \
              --arg content "$TITLE\n$DESCRIPTION" \
              --argjson embeds "$embeds" \
              '{content: $content, embeds: $embeds}'
            )

            echo "Payload:"
            echo "$payload" | jq

            # Send to Discord and capture response
            response=$(curl -s -w "%{http_code}" -o response.txt -X POST -H "Content-Type: application/json" -d "$payload" "$DISCORD_WEBHOOK")
            
            cat response.txt
            if [ "$response" -ne 204 ]; then
              echo "Discord POST failed with status $response"
              exit 1
            fi

      - name: Trigger Private Repo Update
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            github.rest.repos.createDispatchEvent({
              owner: 'NicK4rT',
              repo: 'personal',
              event_type: 'travel-post-update'
            })
